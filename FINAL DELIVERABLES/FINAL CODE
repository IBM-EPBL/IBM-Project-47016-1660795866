model=Sequential()
#1 conv layer
model.add(Conv2D(filters=96,kernel_size=(11,11),strides=(4,4),padding="val
id",activation="relu",input_shape=(227,227,3)))
#1 max pool layer
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))
model.add(BatchNormalization())
#2 conv layer
model.add(Conv2D(filters=256,kernel_size=(5,5),strides=(1,1),padding="vali
d",activation="relu"))
#2 max pool layer
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))
model.add(BatchNormalization())
#3 conv layer
model.add(Conv2D(filters=384,kernel_size=(3,3),strides=(1,1),padding="vali
d",activation="relu"))
#4 Conv layer
model.add(Conv2D(filters=384,kernel_size=(3,3),strides=(1,1),padding="vali
d",activation="relu"))
#5 conv layer
model.add(Conv2D(filters=256,kernel_size=(3,3),strides=(1,1),padding="vali
d",activation="relu"))
#3 max pool layer
model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))
model.add(BatchNormalization())
42 | P a g e
model.add(Flatten())
#1 dense layer
model.add(Dense(4096,input_shape=(227,227,3),activation="relu"))
model.add(Dropout(0.4))
model.add(BatchNormalization())
#2 dense layer
model.add(Dense(4096,activation="relu"))
model.add(Dropout(0.4))
model.add(BatchNormalization())
#3 dense layer
model.add(Dense(1000,activation="relu"))
model.add(Dropout(0.4))
model.add(BatchNormalization())
#output layer
model.add(Dense(20,activation="softmax"))
model.summary()
model.fit(x_train, y_train, epochs=15)
%predict results
pred = model.predict(x_test)
pred.shape
